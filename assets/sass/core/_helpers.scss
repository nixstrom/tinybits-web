// Modules are standalone visual elements.
// To provide a concrete example, a module might be a modal dialog box, or a button.
//
// The modal might have the site’s signature background gradient in the header,
// it might have a drop shadow around it, it might have a close button in the
// top right corner, and it might be positioned fixed and centered vertically
// and horizontally. Each of these four patterns might be used again and again
// all over the site, so you wouldn’t want to have to recode those patterns each time.

// Grid stuff
// ==========================================================================

%container {
  @include container;
  padding: {
    left: $grid-padding;
    right: $grid-padding;
  }
}

// Clearfix
// ==========================================================================

%clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Mixins
// ==========================================================================

//Function to calculate rem value from expected pixel value
@function rem($values...) {
  // How many values must we loop through?
  $length: length($values);
  // Variable to hold our final values
  $output: '';

  @for $i from 1 through $length {
    $value: nth($values, $i);

    // If value is 0 or auto, preserve it as is
    @if $value == 0 or $value == auto {
      $output: #{$output + $value};
    }
    @else {
      // Convert input "base-pixel-value" to corresponding rem value
      $value: $value/$base-font-size;
      $output: #{$output + $value}rem;
    }

    // Unless it's the last value, add a whitespace
    @if $i < $length {
      $output: #{$output + " "};
    }
  }

  @return $output;
}

// Usage ----
//.foo {
  //font-size: rem(14);
  //padding: rem(16, auto, 0, 10);
//}


@mixin font-size($size) {
  $size: $size/$base-font-size;
  font-size: ($size)+rem;
}
